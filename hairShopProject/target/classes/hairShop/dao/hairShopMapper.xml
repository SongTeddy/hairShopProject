<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="hairShopSQL">

<select id="getSearchListOrderByDistance" parameterType="java.util.Map" resultType="java.util.Map">
	select 
        nvl(round(avg(starscope), 1), 0) as avgstar, count(starscope) as reviewcnt,
        hairshopid, hairshopimage1, name, 
		addr1, addr2, latitud, longitude, tel1, tel2, tel3, 
		hairshopcontent, opentime, closetime, dayoff,
        minprice, maxprice, DISTANCE from 
	(select * from 
		(
		select hairshopid, hairshopimage1, name, 
		addr1, addr2, latitud, longitude, tel1, tel2, tel3, 
		hairshopcontent, opentime, closetime, dayoff,
		min(serviceinfo.PRICE) as minprice, max(serviceinfo.PRICE) as maxprice, 
		round(DISTANCE_BETWEEN(#{latitud }, #{longitude }, latitud, longitude), 2) as DISTANCE
		from MEMBERINFO 
		join serviceinfo using(hairshopid) 
		where service=#{service }
		and dayoff like '%${day }%'
		group by hairshopid, hairshopimage1, name, 
		addr1, addr2, latitud, longitude, tel1, tel2, tel3, 
		hairshopcontent,opentime, closetime, dayoff,
		DISTANCE_BETWEEN(#{latitud }, #{longitude }, latitud, longitude)
		)
	<![CDATA[
	where DISTANCE < 10000
	]]>
    ) left join review using(hairshopid)
    group by hairshopid, hairshopimage1, name, 
		addr1, addr2, latitud, longitude, tel1, tel2, tel3, 
		hairshopcontent,opentime, closetime, dayoff,
		minprice, maxprice, DISTANCE 
	order by DISTANCE asc, AVGSTAR desc
</select>

<select id="getSearchListOrderByStar" parameterType="java.util.Map" resultType="java.util.Map">
	select 
        nvl(round(avg(starscope), 1), 0) as avgstar, count(starscope) as reviewcnt,
        hairshopid, hairshopimage1, name, 
		addr1, addr2, latitud, longitude, tel1, tel2, tel3, 
		hairshopcontent, opentime, closetime, dayoff,
        minprice, maxprice, DISTANCE from 
	(select * from 
		(
		select hairshopid, hairshopimage1, name, 
		addr1, addr2, latitud, longitude, tel1, tel2, tel3, 
		hairshopcontent, opentime, closetime, dayoff,
		min(serviceinfo.PRICE) as minprice, max(serviceinfo.PRICE) as maxprice, 
		round(DISTANCE_BETWEEN(#{latitud }, #{longitude }, latitud, longitude), 2) as DISTANCE
		from MEMBERINFO 
		join serviceinfo using(hairshopid) 
		where service=#{service }
		and dayoff like '%${day }%'
		group by hairshopid, hairshopimage1, name, 
		addr1, addr2, latitud, longitude, tel1, tel2, tel3, 
		hairshopcontent,opentime, closetime, dayoff,
		DISTANCE_BETWEEN(#{latitud }, #{longitude }, latitud, longitude)
		)
	<![CDATA[
	where DISTANCE < 10000
	]]>
    ) left join review using(hairshopid)
    group by hairshopid, hairshopimage1, name, 
		addr1, addr2, latitud, longitude, tel1, tel2, tel3, 
		hairshopcontent,opentime, closetime, dayoff,
		minprice, maxprice, DISTANCE 
	order by AVGSTAR desc, DISTANCE asc
</select>

<select id="getHairShopInfo" parameterType="String" resultType="java.util.Map">
	select * from memberinfo where hairshopid=#{value }
</select>

<select id="getDesignerInfo"  parameterType="String" resultType="java.util.Map">
	select * from designerinfo where hairshopid = #{hairShopId } order by positioncode asc
</select>


<select id="getServiceList" parameterType="java.util.Map" resultType="java.util.Map">
	select * from SERVICEINFO where hairshopid=#{hairShopId } and service=#{pickedService }
</select>


<select id="getDesignerSchedule" parameterType="java.util.Map" resultType="java.util.Map">
	select *
	from DESIGNERSCHEDULE join DESIGNERINFO using(designerid)
	where DESIGNERSCHEDULE.hairshopid=#{hairShopId } 
	and DESIGNERSCHEDULE.theday=to_char(to_date(#{selectedDay }, 'mm dd yyyy'), 'yyyy-mm-dd') order by DESIGNERINFO.positioncode asc, DESIGNERINFO.designername asc
</select>

<select id="timeBtnCheck" parameterType="java.util.Map" resultType="java.util.Map">
	select * from reservation where designerid=#{DESIGNERID } and theday=#{THEDAY }
</select>


<!-- reservation할 때 다른 곳에서 중복되는 시간에 예약하려고 하면, 그걸 막아야 하니까 만든 문장임 -->
<select id="noConflict" parameterType="java.util.Map" resultType="java.util.Map">
	<![CDATA[
	select
    case when (to_date(#{theDay }||' '||#{startTime }, 'yyyy-mm-dd hh24:mi')) >= starttime 
    and to_date(#{theDay }||' '||#{startTime }, 'yyyy-mm-dd hh24:mi') <= endtime - 1/24/60)
    then 'O'
    else 'X'
	end "alreadyReserved"
	from reservation
	where designerid=#{designerId }
	and theday=#{theDay }
	]]>
</select>




<insert id="confirmedReservation" parameterType="java.util.Map">
	insert into reservation
	values(
	    #{bookerEmail }, #{bookerName }, 
	    #{bookerTel1 }, #{bookerTel2 }, #{bookerTel3 }, #{requests },
	    #{hairShopId }, #{designerId }, #{designerName },
	    #{service }, #{description },
	    #{price }, #{timeRequired },
	    to_date(#{theDay }||' '||#{startTime }, 'yyyy-mm-dd hh24:mi'), 
	    to_date(#{theDay }||' '||#{startTime }, 'yyyy-mm-dd hh24:mi') + ${timeRequired }/24/60, 
	    #{theDay }, 0, sysdate
	)
</insert>

<select id="getTel"  parameterType="String" resultType="java.util.Map">
	select tel1, tel2, tel3 from MEMBERINFO where email = #{memEmail }
</select>


<!-- 리뷰 리스트 -->
<select id="hairShopReviewList" resultType="hairShopReview">
	select * from review
</select>

<!-- 리뷰 글쓰기 -->
<insert id="hairShopReviewWrite" parameterType="java.util.Map" >
	insert into review(seq,email,hairshopid,designerid,positioncode,designername,designerimage,service,description,reviewsubject,reviewcontent,starscope) values(seq_review.nextval,#{BOOKEREMAIL},#{HAIRSHOPID},#{DESIGNERID},#{POSITIONCODE},#{DESIGNERNAME},#{DESIGNERIMAGE},#{SERVICE},#{DESCRIPTION},#{reviewSubject},#{reviewContent},#{starScope})
</insert>

<select id="getHeartBtn" parameterType="java.util.Map" resultType="java.util.Map">
	select * from heart where email=#{memEmail } and hairshopid = #{hairShopId }	
</select>

<insert id="insertHeart" parameterType="java.util.Map" >
	insert into heart select #{memEmail}, #{hairShopId }, (select name from memberinfo where hairShopId = #{hairShopId }) from dual where not exists (select 0 from heart where email=#{memEmail } and hairshopid=#{hairShopId })
</insert>

<delete id="deleteHeart" parameterType="java.util.Map">
	delete heart where email=#{memEmail } and hairshopid = #{hairShopId }
</delete>

<select id="getSearchHairShopList" parameterType="String" resultType="java.util.Map">
	select * from
	(
	select nvl(round(avg(starscope), 1), 0) as avgstar, count(starscope) as reviewcnt,
	hairshopid, hairshopimage1, name, 
	addr1, addr2, latitud, longitude, tel1, tel2, tel3, 
	hairshopcontent, opentime, closetime, dayoff
	from review left full join memberinfo using(hairshopid)
	where memberinfo.name like '%${value }%' and memberinfo.type = 1
	group by hairshopid, hairshopimage1, name,
	addr1, addr2, latitud, longitude, tel1, tel2, tel3, 
	hairshopcontent, opentime, closetime, dayoff
	)
	order by avgstar
</select>
</mapper>